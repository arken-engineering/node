import { RelationMappings, JSONSchema } from 'objection';
import Account from './account';
import Profile from './profile';
import Idea from './idea';
import Project from './project';
import Product from './product';
import Community from './community';
import Collection from './collection';
import Discussion from './discussion';
import BaseModel from './base';
import Vote from './vote';
export declare enum NodeRelation {
    Chat = "chat"
}
export default class Node extends BaseModel {
    parentId: number;
    relationKey: string;
    relationType: string;
    fromAccount: Account;
    fromAccountId: number;
    toAccount: Account;
    toAccountId: number;
    fromProfile: Profile;
    fromProfileId: number;
    toProfile: Profile;
    toProfileId: number;
    fromBadgeId: number;
    toBadgeId: number;
    fromAchievementId: number;
    toAchievementId: number;
    fromIdea: Idea;
    fromIdeaId: number;
    toIdea: Idea;
    toIdeaId: number;
    fromSuggestionId: number;
    toSuggestionId: number;
    fromProject: Project;
    fromProjectId: number;
    toProject: Project;
    toProjectId: number;
    fromProduct: Product;
    fromProductId: number;
    toProduct: Product;
    toProductId: number;
    fromAssetId: number;
    toAssetId: number;
    fromBountyId: number;
    toBountyId: number;
    fromRealmId: number;
    toRealmId: number;
    fromCommunity: Community;
    toCommunity: Community;
    fromCommunityId: number;
    toCommunityId: number;
    fromCollection: Collection;
    toCollection: Collection;
    fromCollectionId: number;
    toCollectionId: number;
    fromDiscussion: Discussion;
    toDiscussion: Discussion;
    fromDiscussionId: number;
    toDiscussionId: number;
    fromMessageId: number;
    toMessageId: number;
    fromOfferId: number;
    toOfferId: number;
    fromLicenseId: number;
    toLicenseId: number;
    fromOrderId: number;
    toOrderId: number;
    fromRatingId: number;
    toRatingId: number;
    fromReviewId: number;
    toReviewId: number;
    fromTagId: number;
    toTagId: number;
    fromVote: Vote;
    fromVoteId: number;
    toVote: Vote;
    toVoteId: number;
    fromLeaderboardId: number;
    toLeaderboardId: number;
    fromLogId: number;
    toLogId: number;
    fromFileId: number;
    toFileId: number;
    fromEventId: number;
    toEventId: number;
    fromServerId: number;
    toServerId: number;
    static get tableName(): string;
    static get timestamps(): boolean;
    static get jsonSchema(): JSONSchema;
    static get relationMappings(): RelationMappings;
    from(): any;
    to(): any;
}
